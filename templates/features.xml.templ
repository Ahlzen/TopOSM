<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE Map[
    <!ENTITY % utils SYSTEM "include/utils.inc">
    <!ENTITY % colors SYSTEM "include/colors.inc">
    <!ENTITY % nhdfcodes SYSTEM "include/nhdfcodes.inc">
    <!ENTITY symbolsdir "symbols">
    <!ENTITY customsymbolsdir "custom-symbols">
    <!ENTITY dbsettings SYSTEM "include/dbsettings.inc">
    <!ENTITY extents SYSTEM "include/extents.inc">
    <!ENTITY extentsLatLon SYSTEM "include/extentsLatLon.inc">
    <!ENTITY rounded SYSTEM "include/rounded.inc">
    <!ENTITY roadoutline SYSTEM "include/roadoutline.inc">
    <!ENTITY bridgeoutline SYSTEM "include/bridgeoutline.inc">
    <!ENTITY highway SYSTEM "include/highway.inc">
    <!ENTITY rail SYSTEM "include/rail.inc">
    <!ENTITY aeroway SYSTEM "include/aeroway.inc">
    <!ENTITY nhd SYSTEM "include/nhd.inc">
    <!ENTITY label SYSTEM "include/labels.inc">
    <!ENTITY shield SYSTEM "include/shields.inc">
    <!ENTITY symbol SYSTEM "include/symbols.inc">
    %utils;
    %colors;
    %nhdfcodes;
]>

<Map background-color="transparent" srs="&srs900913;">

&nhd;

<Style name="nature-areas">
    <Rule>
      &minz7; &maxz9;
      <Filter>[way_area] &gt; 50000000</Filter>
      <PolygonSymbolizer
        fill="#170"
        fill-opacity="0.05" />
      <LineSymbolizer
        stroke="#170"
        stroke-width="1.0"
        stroke-dasharray="5,2"
        stroke-opacity="0.7" />
    </Rule>
    <Rule>
      <Filter>[way_area] &gt; 10000000</Filter>
      &minz10; &maxz11;
      <PolygonSymbolizer
        fill="#170"
        fill-opacity="0.05" />
      <LineSymbolizer
        stroke="#170"
        stroke-width="1.8"
        stroke-dasharray="7,3"
        stroke-opacity="0.7" />
    </Rule>

    <!-- High zoom: Outline large areas, shade small areas -->
    <!-- This is a workaround for the fact that some large areas,
    like some national parks, are just tagged as 'park' -->
    <Rule>
      <Filter>[way_area] &gt; 5000000</Filter>
      &minz12; &maxz18;
      <LineSymbolizer
        stroke="#170"
        stroke-width="3"
        stroke-dasharray="8,3"
        stroke-opacity="0.7" />
    </Rule>
    <Rule>
      <Filter>[way_area] &lt; 5000000</Filter>
      <PolygonSymbolizer
        fill="#170"
        fill-opacity="0.1" />
    </Rule>
    <!--
    <Rule>
      <Filter>[way_area] &gt;= 200 000 000</Filter>
      &minz8; &maxz9;
      <TextSymbolizer name="[name]" face-name="DejaVu Sans Book" size="7" fill="#170" halo-radius="1" wrap-width="14"/>
    </Rule>
    <Rule>
      &minz10; &maxz11;
      <TextSymbolizer name="[name]" face-name="DejaVu Sans Book" size="9" fill="#170" halo-radius="1" wrap-width="14"/>
    </Rule>
    -->
</Style>

<Style name="misc-areas">

  <!-- Military areas -->
  <Rule>
    &minz6; &maxz13;
    <Filter>[landuse] = 'military'</Filter>
    <PolygonPatternSymbolizer file="&customsymbolsdir;/hatch-red-10.png" />
    <LineSymbolizer stroke="#f00" stroke-width="1" stroke-opacity="1.0" />
  </Rule>
  <Rule>
    &minz14;
    <Filter>[landuse] = 'military'</Filter>
    <PolygonPatternSymbolizer file="&customsymbolsdir;/hatch-red-16.png" />
    <LineSymbolizer stroke="#f00" stroke-width="1.5" stroke-opacity="1.0" />
  </Rule>

  <Rule>
      &minz10;
      <Filter>  
        [landuse] = 'cemetery' or
        [amenity] = 'grave_yard'
      </Filter>
      <PolygonSymbolizer fill="#8b8" fill-opacity="&areaopacity;" />
      <LineSymbolizer stroke="#8b8" stroke-width="1" />
  </Rule>
  <Rule>
      &minz10;
      <Filter>[landuse] = 'construction'</Filter>
      <PolygonSymbolizer fill="#bb3" fill-opacity="&areaopacity;" />
      <LineSymbolizer stroke="#bb3" stroke-width="1" />
  </Rule>
  <Rule>
      &minz10;
      <Filter>[natural] = 'beach'</Filter>
      <PolygonSymbolizer fill="#fec" fill-opacity="&areaopacity;" />
      <LineSymbolizer stroke="#fec" stroke-width="1" />
  </Rule>

</Style>

<!-- adapted from OSM mapnik stylesheet -->
<Style name="ferry-routes">
    <Rule>
      &minz8; &maxz10;
      <Filter>[route] = 'ferry'</Filter>
      <LineSymbolizer stroke="&waterlinecolor;" stroke-width="0.4" stroke-dasharray="4,4" />
    </Rule>
    <Rule>
      <Filter>[route] = 'ferry'</Filter>
      &minz11;
      <LineSymbolizer stroke="&waterlinecolor;" stroke-width="0.8" stroke-dasharray="6,6" />
    </Rule>
</Style>

&highway;
&rail;
&aeroway;
&label;
&shield;
&symbol;

<Style name="aerialway">
	<Rule>
		&minz12;
		<Filter>
			[aerialway] = 'cable_car' or
			[aerialway] = 'gondola' or
			[aerialway] = 'chair_lift' or
			[aerialway] = 'drag_lift'
		</Filter>	
		<LinePatternSymbolizer file="symbols/chair_lift.png" />
	</Rule>
</Style>

<Style name="buildings">
  <Rule>
      &minz12;
      <PolygonSymbolizer fill="black" fill-opacity="0.6" />
  </Rule>
</Style>

<Style name="power-lines">
    <Rule>
        &minz14; &maxz14;
        <Filter>[power] = 'line'</Filter>
        <LineSymbolizer stroke="black" stroke-width="0.5" />
    </Rule>
    <Rule>
        &minz15; &maxz15;
        <Filter>[power] = 'line'</Filter>
        <LineSymbolizer stroke="black" stroke-width="0.7" />
    </Rule>
    <Rule>
        &minz16;
        <Filter>[power] = 'line'</Filter>
        <LineSymbolizer  stroke="black" stroke-width="1.0" />
    </Rule>
</Style>

<Style name="county-borders">
	<Rule>
		&minz9; &maxz10;
  		<Filter>[boundary] = 'administrative' and [admin_level] = '6'</Filter>
  		<LineSymbolizer stroke="black" stroke-width="0.4" stroke-dasharray="10,3,2,3" />
	</Rule>
	<Rule>
		&minz11;
		<Filter>[boundary] = 'administrative' and [admin_level] = '6'</Filter>
		<LineSymbolizer stroke="black" stroke-width="0.7" stroke-dasharray="20,5,4,5" />
	</Rule>
</Style>

<Style name="state-borders">	
    <Rule>
  		&maxz5;
  		<Filter>[boundary] = 'administrative' and [admin_level] = '4'</Filter>
  		<LineSymbolizer stroke="black" stroke-width="0.5" stroke-dasharray="8,3,2,3" />
	</Rule>
	<Rule>
  		&minz6; &maxz10;
  		<Filter>[boundary] = 'administrative' and [admin_level] = '4'</Filter>
  		<LineSymbolizer stroke="black" stroke-width="0.8" stroke-dasharray="10,3,2,3" />
	</Rule>
	<Rule>
		&minz11;
		<Filter>[boundary] = 'administrative' and [admin_level] = '4'</Filter>
		<LineSymbolizer stroke="#825" stroke-width="8" stroke-opacity="0.5" />
		<LineSymbolizer stroke="black" stroke-width="1.5" stroke-dasharray="20,5,4,5" />
	</Rule>
</Style>

<Style name="country-borders">	
    <Rule>
  		&maxz5;
  		<Filter>[boundary] = 'administrative' and [admin_level] = '2'</Filter>
  		<LineSymbolizer stroke="black" stroke-width="1.0" stroke-dasharray="10,3,2,3" />
	</Rule>
	<Rule>
  		&minz6; &maxz10;
  		<Filter>[boundary] = 'administrative' and [admin_level] = '2'</Filter>
  		<LineSymbolizer stroke="black" stroke-width="1.5" stroke-dasharray="15,3,2,3" />
	</Rule>
	<Rule>
		&minz11;
		<Filter>[boundary] = 'administrative' and [admin_level] = '2'</Filter>
        <LineSymbolizer stroke="#880" stroke-width="12" stroke-opacity="0.5" />
		<LineSymbolizer stroke="black" stroke-width="3" stroke-dasharray="30,5,4,5" />
	</Rule>
</Style>



<!-- Layers -->

<!-- NOTE: For zoom levels below 11, different tables with
only major NHD features ("lowzoom") are used. -->


<!-- NHD artificial paths. Any of these that are beneath areas should
     render UNDER the area fill -->
<Layer name="NHDArtificialPath-lowzoom" status="on">
    <StyleName>nhd-flowline-lowzoom</StyleName>
    <Datasource>
      &dbsettings; &extents;
      <Parameter name="table">
        (SELECT way, fcode, gnis_name, lengthkm AS size
         FROM ${NHD_TABLE_PREFIX}_flowline_major
         WHERE fcode = 55800) AS areafeature
      </Parameter>
    </Datasource>
</Layer>
<Layer name="NHDArtificialPath" status="on">
    <StyleName>nhd-flowline</StyleName>
    <Datasource>
      &dbsettings; &extents;
      <Parameter name="table">
        (SELECT way, fcode, gnis_name, lengthkm AS size
         FROM ${NHD_TABLE_PREFIX}_flowline
         WHERE fcode = 55800) AS areafeature
      </Parameter>
    </Datasource>
</Layer>

<!-- Outlining of NHD area features -->
<Layer name="NHDAreaOutline-lowzoom" status="on">
  <StyleName>nhd-water-outline-lowzoom</StyleName>
  <Datasource>
    &dbsettings; &extents;
    <Parameter name="table">
      (SELECT way, fcode, gnis_name, areasqkm AS size
       FROM ${NHD_TABLE_PREFIX}_area_major
       UNION
       SELECT way, fcode, gnis_name, areasqkm AS size
       FROM ${NHD_TABLE_PREFIX}_waterbody_major) AS areafeature
    </Parameter>
  </Datasource>
</Layer>
<Layer name="NHDAreaOutline" status="on">
  <StyleName>nhd-water-outline</StyleName>
  <Datasource>
    &dbsettings; &extents;
    <Parameter name="table">
      (SELECT way, fcode, gnis_name, areasqkm AS size
       FROM ${NHD_TABLE_PREFIX}_area
       UNION
       SELECT way, fcode, gnis_name, areasqkm AS size
       FROM ${NHD_TABLE_PREFIX}_waterbody) AS areafeature
    </Parameter>
  </Datasource>
</Layer>

<!-- Fill NHD area features -->
<Layer name="NHDAreaFill-lowzoom" status="on">
  <StyleName>nhd-water-fill-lowzoom</StyleName>
  <Datasource>
    &dbsettings; &extents;
    <Parameter name="table">
      (SELECT way, fcode, gnis_name, areasqkm AS size
       FROM ${NHD_TABLE_PREFIX}_area_major
       UNION
       SELECT way, fcode, gnis_name, areasqkm AS size
       FROM ${NHD_TABLE_PREFIX}_waterbody_major) AS areafeature
    </Parameter>
  </Datasource>
</Layer>
<Layer name="NHDAreaFill" status="on">
  <StyleName>nhd-water-fill</StyleName>
  <Datasource>
    &dbsettings; &extents;
    <Parameter name="table">
      (SELECT way, fcode, gnis_name, areasqkm AS size
       FROM ${NHD_TABLE_PREFIX}_area
       UNION
       SELECT way, fcode, gnis_name, areasqkm AS size
       FROM ${NHD_TABLE_PREFIX}_waterbody) AS areafeature
    </Parameter>
  </Datasource>
</Layer>

<!-- NHD: dam, foreshore, rapids, spillway -->
<Layer name="NHDAreaFill2" status="on">
  <StyleName>nhd-nonwater-fill</StyleName>
  <Datasource>
    &dbsettings; &extents;
    <Parameter name="table">
      (SELECT way, fcode, gnis_name, areasqkm AS size
       FROM ${NHD_TABLE_PREFIX}_area 
       WHERE fcode IN ( 34300, 34305, 34306, 36400, 37300,
                        43100, 45400, 45403, 45500, 46100 )
       ORDER BY size DESC) AS areafeature
    </Parameter>
  </Datasource>
</Layer>

<Layer name="NHDFlowline-lowzoom" status="on">
  <StyleName>nhd-flowline-lowzoom</StyleName>
  <Datasource>
    &dbsettings; &extents;
    <Parameter name="table">
      (SELECT way, fcode, gnis_name, lengthkm AS size
       FROM ${NHD_TABLE_PREFIX}_flowline_major
       WHERE fcode &lt;&gt; 55800) AS linefeature
    </Parameter>
  </Datasource>
</Layer>
<Layer name="NHDFlowline" status="on">
  <StyleName>nhd-flowline</StyleName>
  <Datasource>
    &dbsettings; &extents;
    <Parameter name="table">
      (SELECT way, fcode, gnis_name, lengthkm AS size
       FROM ${NHD_TABLE_PREFIX}_flowline
       WHERE fcode &lt;&gt; 55800) AS linefeature
    </Parameter>
  </Datasource>
</Layer>

<Layer name="NHDLine" status="on">
  <StyleName>nhd-nonwater-line</StyleName>
  <Datasource>
    &dbsettings; &extents;
    <Parameter name="table">
      (SELECT way, fcode, gnis_name, lengthkm AS size
       FROM ${NHD_TABLE_PREFIX}_line) AS linefeature
    </Parameter>
  </Datasource>
</Layer>


<Layer name="nature-areas" status="on">
  <StyleName>nature-areas</StyleName>
    <Datasource>
      &dbsettings; &extents;
      <Parameter name="table">
      (SELECT way, way_area, name, boundary, "natural" FROM ${DB_PREFIX}_polygon WHERE
      boundary='national_park' OR
      leisure IN ('park', 'nature_reserve', 'common', 'playground', 'garden', 'golf_course', 'recreation_ground') OR
      landuse IN ('forest', 'vineyard', 'conservation', 'recreation_ground', 'village_green', 'allotments') OR
      "natural" IN ('wood')
      ) AS areas
      </Parameter>
    </Datasource>
</Layer>

<Layer name="misc-areas" status="on">
  <StyleName>misc-areas</StyleName>
    <Datasource>
      &dbsettings; &extents;
      <Parameter name="table">
      (SELECT way, way_area, name, landuse, "natural", amenity
      FROM ${DB_PREFIX}_polygon
      WHERE landuse IS NOT NULL OR "natural" IS NOT NULL or amenity IS NOT NULL)
      AS areas
      </Parameter>
    </Datasource>
</Layer>

<Layer name="ferry-routes" status="on">
    <StyleName>ferry-routes</StyleName>
    <Datasource>
	  &dbsettings; &extents;
      <Parameter name="table">
      	(SELECT way, route FROM ${DB_PREFIX}_line WHERE route IS NOT NULL) AS routes
      </Parameter>
    </Datasource>
</Layer>

<Layer name="NHDpoint" status="on">
  <StyleName>nhd-point</StyleName>
  <Datasource>
    &dbsettings; &extents;
    <Parameter name="table">
        (SELECT way, fcode, gnis_name FROM ${NHD_TABLE_PREFIX}_point)
        AS pointfeature      
    </Parameter>
  </Datasource>
</Layer>

<Layer name="buildings" status="on">
    <StyleName>buildings</StyleName>
    <Datasource>
		&dbsettings; &extents;
		<Parameter name="table">
			(SELECT way FROM ${DB_PREFIX}_polygon WHERE building IS NOT NULL) as areas
  		</Parameter>
    </Datasource>
</Layer>

<Layer name="parking-outline" status="on">
    <StyleName>parking-outline</StyleName>
    <Datasource>
		&dbsettings; &extents;
		<Parameter name="table">(SELECT way, amenity, access FROM ${DB_PREFIX}_polygon ORDER BY z_order, way_area DESC) AS parking</Parameter>
    </Datasource>
</Layer>

<!-- Roads at z1-z8 (major roads only) -->
<Layer name="highway-lowzoom" status="on">
    <StyleName>highway-lowzoom</StyleName>
    <Datasource>
	  &dbsettings; &extents;
      <Parameter name="table">
      	(SELECT way, highway, tunnel FROM ${DB_PREFIX}_roads
      	WHERE highway = 'motorway' OR highway = 'trunk'
	   OR highway = 'primary'
      	ORDER BY z_order) AS lines
      </Parameter>
    </Datasource>
</Layer>

<!-- Roads at z9+ (all roads) -->
<Layer name="highway-highzoom" status="on">
    <StyleName>highway-highzoom-outline</StyleName>
    <StyleName>highway-highzoom-fill</StyleName>
    <Datasource>
        &dbsettings; &extents;
        <!--
        asciiphil: By default, osm2pgsql gives link roads the
        same z_order value as their corresponding main classification.
        This results in, e.g., motorway_link roads being rendered on
        top of everything else, which looks kind of bad,
        especially at high zoom levels.  This alters the rendering order
        so link roads are always rendered before any other roads,
        which makes the map look nicer.
        -->
        <Parameter name="table">
            (SELECT way, highway, bridge, tunnel, bicycle,
                    CASE WHEN bridge = 'yes' THEN UNNEST(ARRAY[1,2])
                        ELSE 2
                    END AS pass,
                    CASE WHEN highway LIKE '%_link' THEN true
                        ELSE false
                    END AS link
               FROM ${DB_PREFIX}_line
               WHERE highway IS NOT NULL
               ORDER BY FLOOR(z_order / 10.0), link DESC, z_order, pass) AS lines
        </Parameter>
    </Datasource>
</Layer>

<Layer name="parking-fill" status="on">
    <StyleName>parking-fill</StyleName>
    <Datasource>
		&dbsettings; &extents;
		<Parameter name="table">(SELECT way, amenity, access FROM ${DB_PREFIX}_polygon ORDER BY z_order, way_area DESC) AS parking</Parameter>
    </Datasource>
</Layer>

<Layer name="railway" status="on">
    <StyleName>railway</StyleName>
    <Datasource>
	  &dbsettings; &extents;
      <Parameter name="table">
      	(SELECT way, railway, bridge, tunnel FROM ${DB_PREFIX}_line
      	WHERE railway IS NOT NULL
      	ORDER BY z_order) AS lines
      </Parameter>
    </Datasource>
</Layer>

<Layer name="aeroway-line-outline" status="on">
    <StyleName>aeroway-outline</StyleName>
    <Datasource>
	  &dbsettings; &extents;
      <Parameter name="table">
      	(SELECT way, aeroway FROM ${DB_PREFIX}_line WHERE aeroway IS NOT NULL ORDER BY z_order) AS lines
      </Parameter>
    </Datasource>
</Layer>

<Layer name="aeroway-area-outline" status="on">
    <StyleName>aeroway-outline</StyleName>
    <Datasource>
	  &dbsettings; &extents;
      <Parameter name="table">
      	(SELECT way, aeroway FROM ${DB_PREFIX}_polygon WHERE aeroway IS NOT NULL ORDER BY z_order) AS areas
      </Parameter>
    </Datasource>
</Layer>

<Layer name="aeroway-line-fill" status="on">
    <StyleName>aeroway-fill</StyleName>
    <Datasource>
	  &dbsettings; &extents;
      <Parameter name="table">
      	(SELECT way, aeroway FROM ${DB_PREFIX}_line WHERE aeroway IS NOT NULL ORDER BY z_order) AS lines
      </Parameter>
    </Datasource>
</Layer>

<Layer name="aeroway-area-fill" status="on">
    <StyleName>aeroway-fill</StyleName>
    <Datasource>
	  &dbsettings; &extents;
      <Parameter name="table">
      	(SELECT way, aeroway FROM ${DB_PREFIX}_polygon WHERE aeroway IS NOT NULL ORDER BY z_order) AS areas
      </Parameter>
    </Datasource>
</Layer>

<Layer name="aerialway" status="on">
    <StyleName>aerialway</StyleName>
    <Datasource>
	  &dbsettings; &extents;
      <Parameter name="table">
      	(SELECT way, aerialway from ${DB_PREFIX}_line WHERE aerialway IS NOT NULL) AS aerialway
      </Parameter>
    </Datasource>
</Layer>

<Layer name="power-lines" status="on">
    <StyleName>power-lines</StyleName>
    <Datasource>
        &dbsettings; &extents;
        <Parameter name="table">
            (SELECT way, power FROM ${DB_PREFIX}_line WHERE power IS NOT NULL) AS power
        </Parameter>
    </Datasource>
</Layer>

<Layer name="borders-level6" status="off">
    <StyleName>county-borders</StyleName>
	<Datasource>
		&dbsettings; &extents;
		<Parameter name="table">
		(SELECT way,boundary,admin_level FROM ${DB_PREFIX}_roads
        WHERE "boundary"='administrative' AND admin_level = '6')
        AS borders
        </Parameter>
    </Datasource>
</Layer>

<Layer name="borders-level2-4" status="on">
	<StyleName>state-borders</StyleName>
	<StyleName>country-borders</StyleName>
	<Datasource>
		&dbsettings; &extents;
		<Parameter name="table">
		(SELECT way,boundary,admin_level FROM ${DB_PREFIX}_roads
        WHERE "boundary"='administrative' AND admin_level IN ('2','4'))
        AS borders
        </Parameter>
    </Datasource>
</Layer>

<Layer name="statenames" status="on">
    <StyleName>statenames</StyleName>
    <Datasource>
		&dbsettings; &extents;
		<Parameter name="table">
		(SELECT way, place, name, ref FROM ${DB_PREFIX}_point
		WHERE place = 'state') AS statenames
		</Parameter>
    </Datasource>
</Layer>

<Layer name="placenames" status="on">
    <StyleName>placenames</StyleName>
    <Datasource>
        &dbsettings; &extents;
        <Parameter name="table">
            (SELECT way, name, place,
                    CASE WHEN place = 'city' THEN 2
                         WHEN place = 'town' THEN 4
                         WHEN place = 'suburb' THEN 5
                         WHEN place = 'village' THEN 6
                         WHEN place = 'hamlet' THEN 7
                         WHEN place = 'island' THEN 8
                         WHEN place = 'locality' THEN 9
                         ELSE 10
                     END AS place_order
             FROM ${DB_PREFIX}_point
             WHERE place IS NOT NULL AND name IS NOT NULL
             ORDER BY place_order) AS placenames
        </Parameter>
    </Datasource>
</Layer>

<Layer name="interstateshields" status="on">
    <StyleName>interstateshields</StyleName>
    <Datasource>
    	&dbsettings; &extents;
		<Parameter name="table">
		(SELECT way, highway, roadnumber, char_length(roadnumber) as textlen FROM ${DB_PREFIX}_roads
		WHERE (highway = 'motorway' OR highway = 'trunk') AND roadtype = 'I')
		AS interstateshields</Parameter>
    </Datasource>
</Layer>

<Layer name="usshields" status="on">
    <StyleName>usshields</StyleName>
    <Datasource>
		&dbsettings; &extents;
		<Parameter name="table">
		(SELECT way, highway, roadnumber FROM ${DB_PREFIX}_roads
		WHERE (highway &lt;&gt; '' AND highway IS NOT NULL) AND roadtype = 'U')
		AS usshields</Parameter>
    </Datasource>
</Layer>

<Layer name="stateshields" status="on">
    <StyleName>stateshields</StyleName>
    <Datasource>
    	&dbsettings; &extents;
		<Parameter name="table">
		(SELECT * FROM ${DB_PREFIX}_roads
		WHERE (highway &lt;&gt; '' AND highway IS NOT NULL) AND roadtype = 'S')
		AS stateshields</Parameter>
    </Datasource>
</Layer>

<Layer name="streetnames" status="on">
    <StyleName>streetnames</StyleName>
    <StyleName>trailnames</StyleName>
    <Datasource>
		&dbsettings; &extents;
		<Parameter name="table">
		(SELECT way, highway, name, tunnel FROM ${DB_PREFIX}_line ORDER BY z_order)
		AS streetnames</Parameter>
    </Datasource>
</Layer>

<Layer name="nhdflowlinenames" status="on">
    <StyleName>water-line-labels</StyleName>
	<Datasource>
		&dbsettings; &extents;
		<Parameter name="table">
		(SELECT way, fcode, ftype, lengthkm, gnis_name FROM ${NHD_TABLE_PREFIX}_flowline) AS nhdflowline</Parameter>
	</Datasource>
</Layer>

<Layer name="nhdwaterbodynames" status="on">
    <StyleName>water-body-labels</StyleName>
	<Datasource>
		&dbsettings; &extents;
		<Parameter name="table">
		(SELECT way, fcode, ftype, areasqkm, gnis_name FROM ${NHD_TABLE_PREFIX}_waterbody) AS nhdwaterbody</Parameter>
	</Datasource>
</Layer>

<Layer name="pointfeaturenames" status="on">
    <StyleName>featurenames</StyleName>
    <Datasource>
		&dbsettings; &extents;
		<!--
		HACK: postgres converts elevation m -> ft, and appends unit
		NOTE: The CASE is a workaround for when 'm' is explicitly specified
		as the unit.
		-->
		<Parameter name="table">
		(SELECT way, name, "natural", aeroway, railway, landuse, leisure,
		    boundary, 0 as way_area, CAST(ele_ft AS VARCHAR) ||
		 ' ft' as ele_w_unit
		 FROM ${DB_PREFIX}_point) AS featurenames
		</Parameter>
    </Datasource>
</Layer>

<Layer name="areafeaturenames" status="on">
    <StyleName>featurenames</StyleName>
    <Datasource>
		&dbsettings; &extents;
		<Parameter name="table">
		(SELECT way, name, "natural", aeroway, railway, landuse, leisure,
		 boundary, way_area, '' AS ele_w_unit
		 FROM ${DB_PREFIX}_polygon ORDER BY z_order, way_area DESC)
		 AS areafeaturenames</Parameter>
    </Datasource>
</Layer>

<Layer name="points" status="on">
    <StyleName>symbols</StyleName>
    <Datasource>
      &dbsettings; &extents;
      <Parameter name="table">${DB_PREFIX}_point</Parameter>
    </Datasource>
</Layer>

</Map>
